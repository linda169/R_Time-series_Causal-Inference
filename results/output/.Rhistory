library(gridExtra)
library(fpp3)
library(tseries)
library(expsmooth)
library(data.table)
library(tibble)
library(tsibble)
library(lubridate)
library(dplyr)
library(openair)
library(rts)
#----Loading data------
df <- read.csv("ESMdata.csv")
head(df)
#ADDITIONAL STEPS
colSums(is.na(df)) # check for missing data per colomn
#------ Preprocessing of data ---------
#take the average of the intraday values so that there is only 1 daily value per column
# do this for all variables that you consider
df_day <- df %>%
group_by(dayno) %>%
summarise(
mood_down_avg=(sum(mood_down)/length(dayno)),
concentrat_avg=(sum(concentrat)/length(dayno)),
mood_anxious_avg=(sum(mood_anxious)/length(dayno)),
se_selfdoub_avg=(sum(se_selfdoub)/length(dayno)),
phy_tired_avg=(sum(phy_tired)/length(dayno)),
mood_irritat_avg=(sum(mood_irritat)/length(dayno)),
mood_lonely_avg=(sum(mood_lonely)/length(dayno)),
pat_agitate_avg=(sum(pat_agitate)/length(dayno)),
date=date[1]
)
df_day %>%
mutate(date = dmy(date)) %>% # transform date into correct formate and merge with time # creating datetime object
as_tsibble(index = date) %>%  # transform to tsibble object
dplyr::select( # select variables/columns %>%
date,
dayno,
mood_down_avg,
concentrat_avg,
se_selfdoub_avg,
mood_anxious_avg,
phy_tired_avg,
mood_irritat_avg,
mood_lonely_avg,
pat_agitate_avg)-> df_ts
# check if data is complete
# complete data
has_gaps(df_ts) # check for implicit gaps
df_ts_clean<-tsibble::fill_gaps(df_ts) # make implicit missing data explicit
colSums(is.na(df_ts)) #check for missing data for each column
df_ts_clean %>% replace_na(list(dayno = 350)) -> df_ts_clean # replace one NA in dayno manually
df_ts_clean<-na.locf(df_ts_clean) # impute rest of NAs
has_gaps(df_ts_clean) # check for implicit gaps again
colSums(is.na(df_ts_clean)) #check again for NAs
print(df_ts_clean)
# autoplot for outcome variable
autoplot(df_ts_clean, vars(mood_down_avg))
# autocorrelation of outcome variable
acf(df_ts_clean$mood_down_avg)
adf.test(df_ts_clean$mood_down_avg)
#split data into training data(for the fitting) and test data(for the forecasting)
library(forecast)
train <- head(df_ts_clean, 218)#use first 218 time points for the fitting
test <- tail(df_ts_clean, 21 ) # use last 21 time points for forecasting
fit1 <- train %>% model(ARIMA(mood_down_avg)) #fit without using predictors
report(fit1)
gg_tsresiduals(fit1)
adf.test(augment(fit1)$.resid)
#fitting using 3 predictors
fit2 <- train %>% model(ARIMA(mood_down_avg ~  se_selfdoub_avg  + mood_anxious_avg + mood_lonely_avg ))
report(fit2)
gg_tsresiduals(fit2)
# forecasts for outcome variable without predictor, only based on the
# parameters of the model that was fitted
forecast1<- forecast(fit1, new_data=test) %>% autoplot()
forecast1<-forecast1+ autolayer(tail(train,21), vars(mood_down_avg)) # 20 time points from actual data and last 20 are the predicted values
# forecasts for outcome variable based on future values of the predictors, and on the
# parameters of the model that was fitted
forecast2<- forecast(fit2, new_data=test) %>% autoplot()
forecast2<-forecast2 +autolayer(tail(train,21), vars(mood_down_avg))
actual_future<-autoplot(tail(df_ts_clean,42), vars(mood_down_avg)) # compare it to actual data # last 40 observations
grid.arrange( forecast1, forecast2,actual_future, nrow = 3)# plot
ts.plot(df_ts_clean$phy_tired_avg, ylab="Physical Tiredness", xlab= "Day") # x variable
ts.plot(df_ts_clean$mood_down_avg, ylab="How down the patient feels", xlab= "Day") # y variable
x<-df_ts_clean$phy_tired_avg
y<- df_ts_clean$mood_down_avg
y_diff<-diff(y)
x_diff<-diff(x)
ccf(x_diff,y_diff,10, ylab="CCF")
fit_causal <- df_ts_clean %>%
# Restrict data so models use same fitting period
mutate(y = c(NA,NA,NA,NA,NA,NA, y[7:239])) %>%
# Estimate models
model(
indep = ARIMA(y),
lag1 = ARIMA(y~ lag(x)),
lag2 = ARIMA(y~ lag(x) + lag(x,2)),
lag3 = ARIMA(y~ lag(x) + lag(x,2) + lag(x,3)),
lag4 = ARIMA(y~ lag(x) + lag(x,2) + lag(x,3) + lag(x,4)),
lag5 = ARIMA(y~ lag(x) + lag(x,2) + lag(x,3) + lag(x,4) + lag(x,5)),
lag6 = ARIMA(y~ lag(x) + lag(x,2) + lag(x,3) + lag(x,4) + lag(x,5)+ lag(x,6))
)
glance(fit_causal)
plot(seq(0,6),glance(fit_causal)$AICc,
col = "orange", type = "b",
ylab = "Information Criteria", xlab = "model",
ylim = c(300,400))
lines(seq(0,6),glance(fit_causal)$BIC, col = "blue", type = "b")
legend("topright", c("AICc","BIC"), col = c("orange","blue"), lty = 1)
fit_best_aic <- df_ts_clean %>% model(ARIMA(y~ lag(x) + lag(x,2) + lag(x,3)))
report(fit_best_aic)
fit_best_aic2 <- df_ts_clean %>% model(ARIMA(y~ lag(x) + lag(x,2) + lag(x,3)+ lag(x,4) + lag(x,5)+ lag(x,6)))
report(fit_best_aic2)
gg_tsresiduals(fit_best_aic)
gg_tsresiduals(fit_best_aic2)
